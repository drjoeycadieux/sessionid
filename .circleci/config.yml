version: 2.1

executors:
  node-executor:
    docker:
      - image: cimg/node:20.11
    working_directory: ~/repo

jobs:
  build:
    executor: node-executor
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
            - v1-dependencies-
      - run:
          name: Install dependencies
          command: npm ci
      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}
      - run:
          name: Build application
          command: npm run build
      - run:
          name: Run tests
          command: npm run test
      - persist_to_workspace:
          root: ~/repo
          paths:
            - .

  deploy:
    machine:
      image: ubuntu-2004:202010-01
    steps:
      - attach_workspace:
          at: ~/repo
      - run:
          name: Install Docker Compose
          command: |
            sudo curl -L "https://github.com/docker/compose/releases/download/2.24.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            docker-compose --version
      - run:
          name: Create production docker-compose file
          command: |
            cd ~/repo
            cat > docker-compose.prod.yml << 'EOF'
            version: '3.8'
            services:
              nuxt:
                build:
                  context: .
                  dockerfile: Dockerfile
                ports:
                  - "3000:3000"
                environment:
                  - NODE_ENV=production
                  - HOST=0.0.0.0
                  - PORT=3000
            EOF
      - run:
          name: Build Docker image
          command: |
            cd ~/repo
            docker-compose -f docker-compose.prod.yml build
      - run:
          name: Start services
          command: |
            cd ~/repo
            docker-compose -f docker-compose.prod.yml up -d
      - run:
          name: Wait for application to be ready
          command: |
            echo "Waiting for application to start..."
            for i in {1..30}; do
              if curl -f http://localhost:3000 > /dev/null 2>&1; then
                echo "Application is ready!"
                exit 0
              fi
              echo "Attempt $i: Application not ready yet, waiting 10 seconds..."
              sleep 10
            done
            echo "Application failed to start within 5 minutes"
            docker-compose -f docker-compose.prod.yml logs
            exit 1
      - run:
          name: Basic health check
          command: |
            echo "Running basic health checks..."
            response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000)
            if [ "$response" != "200" ]; then
              echo "Health check failed with status code: $response"
              docker-compose -f docker-compose.prod.yml logs
              exit 1
            fi
            echo "Health check passed!"
      - run:
          name: Stop services
          command: |
            cd ~/repo
            docker-compose -f docker-compose.prod.yml down
          when: always

workflows:
  version: 2
  build_and_deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build
          filters:
            branches:
              only:
                - main
                - master
